{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ritesh\\\\Reactjs\\\\mentalhealth\\\\src\\\\components\\\\Medtimer.js\";\nimport React from 'react'; // import ReactDOM from'reactdom'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Medtimer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      time: {},\n      seconds: ''\n    };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  secondsToTime(secs) {\n    let hours = Math.floor(secs / (60 * 60));\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n    let obj = {\n      \"h\": hours,\n      \"m\": minutes,\n      \"s\": seconds\n    };\n    return obj;\n  }\n\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\n    this.setState({\n      time: timeLeftVar\n    });\n  }\n\n  startTimer() {\n    if (this.timer == 0 && this.state.seconds > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({\n      time: this.secondsToTime(seconds),\n      seconds: seconds\n    }); // Check if we're at zero.\n\n    if (seconds == 0) {\n      clearInterval(this.timer);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.second.value,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.startTimer,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), \"m: \", this.state.time.m, \" s: \", this.state.time.s]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this);\n  }\n\n} //   ReactDOM.render(<Medtimer/>, document.getElementById('View'));\n\n\nexport default Medtimer;","map":{"version":3,"sources":["D:/Ritesh/Reactjs/mentalhealth/src/components/Medtimer.js"],"names":["React","Medtimer","Component","constructor","state","time","seconds","timer","startTimer","bind","countDown","handleChange","handleSubmit","event","setState","value","target","alert","preventDefault","secondsToTime","secs","hours","Math","floor","divisor_for_minutes","minutes","divisor_for_seconds","ceil","obj","componentDidMount","timeLeftVar","setInterval","clearInterval","render","second","m","s"],"mappings":"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","sourcesContent":["import React from 'react'\r\n// import ReactDOM from'reactdom'\r\nclass Medtimer extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = { time: {}, seconds: '' };\r\n      this.timer = 0;\r\n      this.startTimer = this.startTimer.bind(this);\r\n      this.countDown = this.countDown.bind(this);\r\n  \r\n      this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this); \r\n    }\r\n  \r\n    handleChange(event) {\r\n        this.setState({value: event.target.value});\r\n      }\r\n    \r\n      handleSubmit(event) {\r\n        alert('A name was submitted: ' + this.state.value);\r\n        event.preventDefault();\r\n      }\r\n    \r\n     \r\n\r\n\r\n    secondsToTime(secs){\r\n      let hours = Math.floor(secs / (60 * 60));\r\n  \r\n      let divisor_for_minutes = secs % (60 * 60);\r\n      let minutes = Math.floor(divisor_for_minutes / 60);\r\n  \r\n      let divisor_for_seconds = divisor_for_minutes % 60;\r\n      let seconds = Math.ceil(divisor_for_seconds);\r\n  \r\n      let obj = {\r\n        \"h\": hours,\r\n        \"m\": minutes,\r\n        \"s\": seconds\r\n      };\r\n      return obj;\r\n    }\r\n  \r\n    componentDidMount() {\r\n      let timeLeftVar = this.secondsToTime(this.state.seconds);\r\n      this.setState({ time: timeLeftVar });\r\n    }\r\n  \r\n    startTimer() {\r\n      if (this.timer == 0 && this.state.seconds > 0) {\r\n        this.timer = setInterval(this.countDown, 1000);\r\n      }\r\n    }\r\n  \r\n    countDown() {\r\n      // Remove one second, set state so a re-render happens.\r\n      let seconds = this.state.seconds - 1;\r\n      this.setState({\r\n        time: this.secondsToTime(seconds),\r\n        seconds: seconds,\r\n      });\r\n      \r\n      // Check if we're at zero.\r\n      if (seconds == 0) { \r\n        clearInterval(this.timer);\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      return(\r\n        <div>\r\n            <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name:\r\n          <input type=\"text\" value={this.state.second.value} onChange={this.handleChange} />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n\r\n\r\n\r\n          <button onClick={this.startTimer}>Start</button>\r\n          m: {this.state.time.m} s: {this.state.time.s}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n//   ReactDOM.render(<Medtimer/>, document.getElementById('View'));\r\n\r\n  export default Medtimer;"]},"metadata":{},"sourceType":"module"}