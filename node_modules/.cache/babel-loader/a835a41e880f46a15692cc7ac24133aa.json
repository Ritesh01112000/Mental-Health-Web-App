{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ritesh\\\\Reactjs\\\\mentalhealth\\\\src\\\\components\\\\music.js\";\nimport React from 'react';\nimport { Component } from 'react/cjs/react.production.min';\nimport audio from '../static/audio.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass music extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Get audio file in a variable\n      audio: new Audio(audio),\n      // Set initial state of song\n      isPlaying: false,\n      time: ''\n    };\n\n    this.playPause = () => {\n      // Get state of song\n      let isPlaying = this.state.isPlaying;\n\n      if (isPlaying) {\n        // Pause the song if it is playing\n        this.state.audio.pause();\n      } else {\n        // Play the song if it is paused\n        this.state.audio.play();\n      } // Change the state of song\n\n\n      this.setState({\n        isPlaying: !isPlaying\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log(localStorage.getItem(\"entry\"));\n    this.setState({\n      time: localStorage.getItem(\"entry\")\n    });\n  } // Main function to handle both play and pause operations\n\n\n  render() {\n    if (this.state.time = 0) {\n      this.props.history.push({\n        pathname: \"Medtimer\"\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.isPlaying ? \"Song is Playing\" : \"Song is Paused\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.playPause,\n        children: \"Play | Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default music;","map":{"version":3,"sources":["D:/Ritesh/Reactjs/mentalhealth/src/components/music.js"],"names":["React","Component","audio","music","state","Audio","isPlaying","time","playPause","pause","play","setState","componentDidMount","console","log","localStorage","getItem","render","props","history","push","pathname"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;AACA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAAA;AAAA;AAAA,SAI5BG,KAJ4B,GAIpB;AAEN;AACAF,MAAAA,KAAK,EAAE,IAAIG,KAAJ,CAAUH,KAAV,CAHD;AAKN;AACAI,MAAAA,SAAS,EAAE,KANL;AAONC,MAAAA,IAAI,EAAC;AAPC,KAJoB;;AAAA,SAqB5BC,SArB4B,GAqBhB,MAAM;AAEhB;AACA,UAAIF,SAAS,GAAG,KAAKF,KAAL,CAAWE,SAA3B;;AAEA,UAAIA,SAAJ,EAAe;AACb;AACA,aAAKF,KAAL,CAAWF,KAAX,CAAiBO,KAAjB;AACD,OAHD,MAGO;AAEL;AACA,aAAKL,KAAL,CAAWF,KAAX,CAAiBQ,IAAjB;AACD,OAZe,CAchB;;;AACA,WAAKC,QAAL,CAAc;AAAEL,QAAAA,SAAS,EAAE,CAACA;AAAd,OAAd;AACD,KArC2B;AAAA;;AAc5BM,EAAAA,iBAAiB,GACjB;AACGC,IAAAA,OAAO,CAACC,GAAR,CAAaC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAb;AACA,SAAKL,QAAL,CAAc;AAACJ,MAAAA,IAAI,EAAEQ,YAAY,CAACC,OAAb,CAAqB,OAArB;AAAP,KAAd;AACF,GAlB2B,CAoB5B;;;AAmBAC,EAAAA,MAAM,GAAG;AAGP,QAAG,KAAKb,KAAL,CAAWG,IAAX,GAAgB,CAAnB,EACA;AACI,WAAKW,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB;AAACC,QAAAA,QAAQ,EAAC;AAAV,OAAxB;AACH;;AAED,wBACE;AAAA,8BAEE;AAAA,kBACG,KAAKjB,KAAL,CAAWE,SAAX,GACC,iBADD,GAEC;AAHJ;AAAA;AAAA;AAAA;AAAA,cAFF,eASE;AAAQ,QAAA,OAAO,EAAE,KAAKE,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeO;;AA9DmB;;AA+D1B,eAAeL,KAAf","sourcesContent":["import React from 'react'\r\nimport { Component } from 'react/cjs/react.production.min';\r\nimport audio from '../static/audio.mp3'\r\nclass music extends Component {\r\n  \r\n\r\n // Create state\r\n  state = {\r\n\r\n    // Get audio file in a variable\r\n    audio: new Audio(audio),\r\n\r\n    // Set initial state of song\r\n    isPlaying: false,\r\n    time:''\r\n  };\r\n\r\n  componentDidMount()\r\n  {\r\n     console.log( localStorage.getItem(\"entry\"))\r\n     this.setState({time: localStorage.getItem(\"entry\")});\r\n  }\r\n  \r\n  // Main function to handle both play and pause operations\r\n  playPause = () => {\r\n\r\n    // Get state of song\r\n    let isPlaying = this.state.isPlaying;\r\n\r\n    if (isPlaying) {\r\n      // Pause the song if it is playing\r\n      this.state.audio.pause();\r\n    } else {\r\n\r\n      // Play the song if it is paused\r\n      this.state.audio.play();\r\n    }\r\n\r\n    // Change the state of song\r\n    this.setState({ isPlaying: !isPlaying });\r\n  };\r\n\r\n  render() {\r\n\r\n\r\n    if(this.state.time=0)\r\n    {\r\n        this.props.history.push({pathname:\"Medtimer\"})\r\n    }\r\n  \r\n    return (\r\n      <div>\r\n        {/* Show state of song on website */}\r\n        <p>\r\n          {this.state.isPlaying ? \r\n            \"Song is Playing\" : \r\n            \"Song is Paused\"}\r\n        </p>\r\n\r\n        {/* Button to call our main function */}\r\n        <button onClick={this.playPause}>\r\n          Play | Pause\r\n        </button>\r\n      </div>\r\n    );\r\n          }}    \r\n    export default music;\r\n\r\n"]},"metadata":{},"sourceType":"module"}