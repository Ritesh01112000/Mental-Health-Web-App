{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ritesh\\\\Reactjs\\\\mentalhealth\\\\src\\\\components\\\\music.js\",\n    _s = $RefreshSig$();\n\n// import React from 'react'\n// import { Component } from 'react/cjs/react.production.min';\n// import audio from '../static/audio.mp3'\n// class music extends Component {\n//  // Create state\n//   state = {\n//     // Get audio file in a variable\n//     audio: new Audio(audio),\n//     // Set initial state of song\n//     isPlaying: false,\n//     time:''\n//   };\n//   componentDidMount()\n//   {\n//      console.log( localStorage.getItem(\"entry\"))\n//      this.setState({time: localStorage.getItem(\"entry\")});\n//   }\n//   // Main function to handle both play and pause operations\n//   playPause = () => {\n//     // Get state of song\n//     let isPlaying = this.state.isPlaying;\n//     if (isPlaying) {\n//       // Pause the song if it is playing\n//       this.state.audio.pause();\n//     } else {\n//       // Play the song if it is paused\n//       this.state.audio.play();\n//     }\n//     // Change the state of song\n//     this.setState({ isPlaying: !isPlaying });\n//   };\n//   render() {\n//     if(this.state.time=0)\n//     {\n//         this.props.history.push({pathname:\"Medtimer\"})\n//     }\n//     return (\n//       <div>\n//         {/* Show state of song on website */}\n//         <p>\n//           {this.state.isPlaying ? \n//             \"Song is Playing\" : \n//             \"Song is Paused\"}\n//         </p>\n//         {/* Button to call our main function */}\n//         <button onClick={this.playPause}>\n//           Play | Pause\n//         </button>\n//       </div>\n//     );\n//           }}    \n//     export default music;\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // We need ref in this, because we are dealing\n  // with JS setInterval to keep track of it and\n  // stop it when needed\n  const Ref = useRef(null); // The state for our timer\n\n  const [timer, setTimer] = useState('00:00:00');\n\n  const getTimeRemaining = e => {\n    const total = Date.parse(e) - Date.parse(new Date());\n    const seconds = Math.floor(total / 1000 % 60);\n    const minutes = Math.floor(total / 1000 / 60 % 60);\n    const hours = Math.floor(total / 1000 * 60 * 60 % 24);\n    return {\n      total,\n      hours,\n      minutes,\n      seconds\n    };\n  };\n\n  const startTimer = e => {\n    let {\n      total,\n      hours,\n      minutes,\n      seconds\n    } = getTimeRemaining(e);\n\n    if (total >= 0) {\n      // update the timer\n      // check if less than 10 then we need to\n      // add '0' at the begining of the variable\n      setTimer((hours > 9 ? hours : '0' + hours) + ':' + (minutes > 9 ? minutes : '0' + minutes) + ':' + (seconds > 9 ? seconds : '0' + seconds));\n    }\n  };\n\n  const clearTimer = e => {\n    // If you adjust it you should also need to\n    // adjust the Endtime formula we are about\n    // to code next\t\n    setTimer('00:00:10'); // If you try to remove this line the\n    // updating of timer Variable will be\n    // after 1000ms or 1sec\n\n    if (Ref.current) clearInterval(Ref.current);\n    const id = setInterval(() => {\n      startTimer(e);\n    }, 1000);\n    Ref.current = id;\n  };\n\n  const getDeadTime = () => {\n    let deadline = new Date(); // This is where you need to adjust if\n    // you entend to add more time\n\n    deadline.setSeconds(deadline.getSeconds() + 10);\n    return deadline;\n  }; // We can use useEffect so that when the component\n  // mount the timer will start as soon as possible\n  // We put empty array to act as componentDid\n  // mount only\n\n\n  useEffect(() => {\n    clearTimer(getDeadTime());\n  }, []); // Another way to call the clearTimer() to start\n  // the countdown is via action event from the\n  // button first we create function to be called\n  // by the button\n\n  const onClickReset = () => {\n    clearTimer(getDeadTime());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClickReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"HPeaHJ9UVwlp0EkypzcTPI/d1Lw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Ritesh/Reactjs/mentalhealth/src/components/music.js"],"names":["React","useState","useRef","useEffect","App","Ref","timer","setTimer","getTimeRemaining","e","total","Date","parse","seconds","Math","floor","minutes","hours","startTimer","clearTimer","current","clearInterval","id","setInterval","getDeadTime","deadline","setSeconds","getSeconds","onClickReset"],"mappings":"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","sourcesContent":["// import React from 'react'\r\n// import { Component } from 'react/cjs/react.production.min';\r\n// import audio from '../static/audio.mp3'\r\n// class music extends Component {\r\n  \r\n\r\n//  // Create state\r\n//   state = {\r\n\r\n//     // Get audio file in a variable\r\n//     audio: new Audio(audio),\r\n\r\n//     // Set initial state of song\r\n//     isPlaying: false,\r\n//     time:''\r\n//   };\r\n\r\n//   componentDidMount()\r\n//   {\r\n//      console.log( localStorage.getItem(\"entry\"))\r\n//      this.setState({time: localStorage.getItem(\"entry\")});\r\n//   }\r\n  \r\n//   // Main function to handle both play and pause operations\r\n//   playPause = () => {\r\n\r\n//     // Get state of song\r\n//     let isPlaying = this.state.isPlaying;\r\n\r\n//     if (isPlaying) {\r\n//       // Pause the song if it is playing\r\n//       this.state.audio.pause();\r\n//     } else {\r\n\r\n//       // Play the song if it is paused\r\n//       this.state.audio.play();\r\n//     }\r\n\r\n//     // Change the state of song\r\n//     this.setState({ isPlaying: !isPlaying });\r\n//   };\r\n\r\n//   render() {\r\n\r\n\r\n//     if(this.state.time=0)\r\n//     {\r\n//         this.props.history.push({pathname:\"Medtimer\"})\r\n//     }\r\n   \r\n//     return (\r\n//       <div>\r\n//         {/* Show state of song on website */}\r\n//         <p>\r\n//           {this.state.isPlaying ? \r\n//             \"Song is Playing\" : \r\n//             \"Song is Paused\"}\r\n//         </p>\r\n\r\n//         {/* Button to call our main function */}\r\n//         <button onClick={this.playPause}>\r\n//           Play | Pause\r\n//         </button>\r\n//       </div>\r\n//     );\r\n//           }}    \r\n//     export default music;\r\n\r\n\r\n\r\n\r\nimport React, { useState, useRef, useEffect } from 'react'\r\n\r\n\r\nconst App = () => {\r\n\r\n\t// We need ref in this, because we are dealing\r\n\t// with JS setInterval to keep track of it and\r\n\t// stop it when needed\r\n\tconst Ref = useRef(null);\r\n\r\n\t// The state for our timer\r\n\tconst [timer, setTimer] = useState('00:00:00');\r\n\r\n\r\n\tconst getTimeRemaining = (e) => {\r\n\t\tconst total = Date.parse(e) - Date.parse(new Date());\r\n\t\tconst seconds = Math.floor((total / 1000) % 60);\r\n\t\tconst minutes = Math.floor((total / 1000 / 60) % 60);\r\n\t\tconst hours = Math.floor((total / 1000 * 60 * 60) % 24);\r\n\t\treturn {\r\n\t\t\ttotal, hours, minutes, seconds\r\n\t\t};\r\n\t}\r\n\r\n\r\n\tconst startTimer = (e) => {\r\n\t\tlet { total, hours, minutes, seconds }\r\n\t\t\t\t\t= getTimeRemaining(e);\r\n\t\tif (total >= 0) {\r\n\r\n\t\t\t// update the timer\r\n\t\t\t// check if less than 10 then we need to\r\n\t\t\t// add '0' at the begining of the variable\r\n\t\t\tsetTimer(\r\n\t\t\t\t(hours > 9 ? hours : '0' + hours) + ':' +\r\n\t\t\t\t(minutes > 9 ? minutes : '0' + minutes) + ':'\r\n\t\t\t\t+ (seconds > 9 ? seconds : '0' + seconds)\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tconst clearTimer = (e) => {\r\n\r\n\t\t// If you adjust it you should also need to\r\n\t\t// adjust the Endtime formula we are about\r\n\t\t// to code next\t\r\n\t\tsetTimer('00:00:10');\r\n\r\n\t\t// If you try to remove this line the\r\n\t\t// updating of timer Variable will be\r\n\t\t// after 1000ms or 1sec\r\n\t\tif (Ref.current) clearInterval(Ref.current);\r\n\t\tconst id = setInterval(() => {\r\n\t\t\tstartTimer(e);\r\n\t\t}, 1000)\r\n\t\tRef.current = id;\r\n\t}\r\n\r\n\tconst getDeadTime = () => {\r\n\t\tlet deadline = new Date();\r\n\r\n\t\t// This is where you need to adjust if\r\n\t\t// you entend to add more time\r\n\t\tdeadline.setSeconds(deadline.getSeconds() + 10);\r\n\t\treturn deadline;\r\n\t}\r\n\r\n\t// We can use useEffect so that when the component\r\n\t// mount the timer will start as soon as possible\r\n\r\n\t// We put empty array to act as componentDid\r\n\t// mount only\r\n\tuseEffect(() => {\r\n\t\tclearTimer(getDeadTime());\r\n\t}, []);\r\n\r\n\t// Another way to call the clearTimer() to start\r\n\t// the countdown is via action event from the\r\n\t// button first we create function to be called\r\n\t// by the button\r\n\tconst onClickReset = () => {\r\n\t\tclearTimer(getDeadTime());\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<h2>{timer}</h2>\r\n\t\t\t<button onClick={onClickReset}>Reset</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}